// This file is used by Code Analysis to maintain SuppressMessage
// attributes that are applied to this project.
// Project-level suppressions either have no target or are given
// a specific target and scoped to a namespace, type, member, etc.

[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1000:Do not declare static members on generic types", Justification = "<Pending>", Scope = "member", Target = "~M:Deipax.Convert.Common.EnumHelper`2.Convert``1(``0,System.IFormatProvider)~`0")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1000:Do not declare static members on generic types", Justification = "<Pending>", Scope = "member", Target = "~M:Deipax.Convert.Common.EnumHelper`2.ConvertFromObject(System.Object,System.IFormatProvider)~`0")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1000:Do not declare static members on generic types", Justification = "<Pending>", Scope = "member", Target = "~M:Deipax.Convert.Common.EnumHelper`2.ConvertFromString(System.String,System.IFormatProvider)~`0")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1000:Do not declare static members on generic types", Justification = "<Pending>", Scope = "member", Target = "~M:Deipax.Convert.Common.EnumHelper`2.ConvertToString(`0,System.IFormatProvider)~System.String")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1062:In externally visible method 'void IExpArgsExtensions.AddGuards<TFrom, TTo>(IExpArgs<TFrom, TTo> args)', validate parameter 'args' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:Deipax.Convert.Extensions.IExpArgsExtensions.AddGuards``2(Deipax.Convert.Interfaces.IExpArgs{``0,``1})")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1062:In externally visible method 'BinaryExpression IExpArgsExtensions.GetDefaultProvider<TFrom, TTo>(IExpArgs<TFrom, TTo> args)', validate parameter 'args' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:Deipax.Convert.Extensions.IExpArgsExtensions.GetDefaultProvider``2(Deipax.Convert.Interfaces.IExpArgs{``0,``1})~System.Linq.Expressions.BinaryExpression")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1062:In externally visible method 'Expression<ConvertDelegate<TFrom, TTo>> DefaultFactory.Create<TFrom, TTo>(IExpArgs<TFrom, TTo> args)', validate parameter 'args' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:Deipax.Convert.Factories.DefaultFactory.Create``2(Deipax.Convert.Interfaces.IExpArgs{``0,``1})~System.Linq.Expressions.Expression{Deipax.Convert.Interfaces.ConvertDelegate{``0,``1}}")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1062:In externally visible method 'Expression<ConvertDelegate<TFrom, TTo>> FromEnum.Create<TFrom, TTo>(IExpArgs<TFrom, TTo> args)', validate parameter 'args' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:Deipax.Convert.Factories.FromEnum.Create``2(Deipax.Convert.Interfaces.IExpArgs{``0,``1})~System.Linq.Expressions.Expression{Deipax.Convert.Interfaces.ConvertDelegate{``0,``1}}")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1062:In externally visible method 'Expression<ConvertDelegate<TFrom, TTo>> FromIConvertible.Create<TFrom, TTo>(IExpArgs<TFrom, TTo> args)', validate parameter 'args' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:Deipax.Convert.Factories.FromIConvertible.Create``2(Deipax.Convert.Interfaces.IExpArgs{``0,``1})~System.Linq.Expressions.Expression{Deipax.Convert.Interfaces.ConvertDelegate{``0,``1}}")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1062:In externally visible method 'Expression<ConvertDelegate<TFrom, TTo>> FromObject.Create<TFrom, TTo>(IExpArgs<TFrom, TTo> args)', validate parameter 'args' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:Deipax.Convert.Factories.FromObject.Create``2(Deipax.Convert.Interfaces.IExpArgs{``0,``1})~System.Linq.Expressions.Expression{Deipax.Convert.Interfaces.ConvertDelegate{``0,``1}}")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1062:In externally visible method 'Expression<ConvertDelegate<TFrom, TTo>> FromString.Create<TFrom, TTo>(IExpArgs<TFrom, TTo> args)', validate parameter 'args' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:Deipax.Convert.Factories.FromString.Create``2(Deipax.Convert.Interfaces.IExpArgs{``0,``1})~System.Linq.Expressions.Expression{Deipax.Convert.Interfaces.ConvertDelegate{``0,``1}}")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1062:In externally visible method 'Expression<ConvertDelegate<TFrom, TTo>> NoConvert.Create<TFrom, TTo>(IExpArgs<TFrom, TTo> args)', validate parameter 'args' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:Deipax.Convert.Factories.NoConvert.Create``2(Deipax.Convert.Interfaces.IExpArgs{``0,``1})~System.Linq.Expressions.Expression{Deipax.Convert.Interfaces.ConvertDelegate{``0,``1}}")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1062:In externally visible method 'Expression<ConvertDelegate<TFrom, TTo>> ToBase<T>.Create<TFrom, TTo>(IExpArgs<TFrom, TTo> args)', validate parameter 'args' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:Deipax.Convert.Factories.ToBase`1.Create``2(Deipax.Convert.Interfaces.IExpArgs{``0,``1})~System.Linq.Expressions.Expression{Deipax.Convert.Interfaces.ConvertDelegate{``0,``1}}")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1062:In externally visible method 'Expression<ConvertDelegate<TFrom, TTo>> ToEnum.Create<TFrom, TTo>(IExpArgs<TFrom, TTo> args)', validate parameter 'args' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:Deipax.Convert.Factories.ToEnum.Create``2(Deipax.Convert.Interfaces.IExpArgs{``0,``1})~System.Linq.Expressions.Expression{Deipax.Convert.Interfaces.ConvertDelegate{``0,``1}}")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1062:In externally visible method 'Expression<ConvertDelegate<TFrom, TTo>> ToOrFromDBNull.Create<TFrom, TTo>(IExpArgs<TFrom, TTo> args)', validate parameter 'args' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:Deipax.Convert.Factories.ToOrFromDBNull.Create``2(Deipax.Convert.Interfaces.IExpArgs{``0,``1})~System.Linq.Expressions.Expression{Deipax.Convert.Interfaces.ConvertDelegate{``0,``1}}")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Build", "CA1062:In externally visible method 'Expression<ConvertDelegate<TFrom, TTo>> ToString.Create<TFrom, TTo>(IExpArgs<TFrom, TTo> args)', validate parameter 'args' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:Deipax.Convert.Factories.ToString.Create``2(Deipax.Convert.Interfaces.IExpArgs{``0,``1})~System.Linq.Expressions.Expression{Deipax.Convert.Interfaces.ConvertDelegate{``0,``1}}")]